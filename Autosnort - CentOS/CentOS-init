#!/bin/bash
#
# snort Start up the Snort Intrusion Detection System daemon #
# chkconfig: 2345 55 25
# description: Snort is a Open Source Intrusion Detection System
# This service starts up the snort daemon. #
# processname: snort
# pidfile: /var/run/snort_eth0.pid

### BEGIN INIT INFO
# Provides: snort
# Required-Start: $local_fs $network $syslog
# Required-Stop: $local_fs $syslog
# Should-Start: $syslog
# Should-Stop: $network $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start up the Snort Intrusion Detection System daemon
# Description: Snort is an application for Open Source Intrusion Detection.
#        This service starts up the Snort IDS daemon.
### END INIT INFO

# source function library 
. /etc/rc.d/init.d/functions

RETVAL=0
prog="snort"
prog2="barnyard2"
lockfile=/var/lock/subsys/$prog
lockfile2=/var/log/subsys/$prog2

# Some functions to make the below more readable
SNORTD=/usr/local/snort/bin/snort
BY2D=/usr/local/bin/barnyard2
OPTIONS="-D -u snort -g snort -c /usr/local/snort/etc/snort.conf -i eth1"
OPTIONS2="-c /usr/local/snort/etc/barnyard2.conf -G /usr/local/snort/etc/gen-msg.map -S /usr/local/snort/etc/sid-msg.map -d /var/log/snort -f snort.u2 -w /var/log/snort/barnyard2.waldo -D"
PID_FILE=/var/run/snort_eth*.pid
PID_FILE2=/var/run/barnyard2_eth*.pid


runlevel=$(set -- $(runlevel); eval "echo \$$#" )

start() 
{
	echo -n "Bringing up snort interface with noarp, nomulticast and promisc flags set."
    /sbin/ifconfig eth1 up -arp -multicast promisc || exit 5
	
	[ -x $SNORTD ] || exit 5
	echo -n $"Starting $prog: "
	$OPTIONS
     && success || failure
    RETVAL=$?

    [ $RETVAL -eq 0 ] && touch $lockfile 
    echo
    return $RETVAL
	
	[ -x $BY2D ] || exit 5
	echo -n $"Starting $prog2: "
	$OPTIONS2
	 && success || failure
    RETVAL=$?

    [ $RETVAL -eq 0 ] && touch $lockfile2 
    echo
    return $RETVAL
}

stop() 
{
    echo -n $"Stopping $prog: " 
    killproc $SNORTD
    if [ -e $PID_FILE ]; then
       chown -R snort:snort /var/run/snort_eth*.* &&
       rm -f /var/run/snort_eth*.pi* 
    fi
    RETVAL=$?
    # if we are in halt or reboot runlevel kill all running sessions 
    # so the TCP connections are closed cleanly
    if [ "x$runlevel" = x0 -o "x$runlevel" = x6 ] ; then
       trap TERM
       killall $prog 2>/dev/null 
       trap TERM
    fi
    [ $RETVAL -eq 0 ] && rm -f $lockfile 
    echo
    return $RETVAL
	
	echo -n $"Stopping $prog2: "
	killproc $BY2D
	if [ -e $PID_FILE2 ]; then
		rm -f /var/run/snort/barnyard2_eth*.pi*
	fi
	RETVAL=$?
	# if we are in halt or reboot runlevel kill all running sessions 
	if [ "x$runlevel" = x0 -o "x$runlevel" = x6 ] ; then
       trap TERM
       killall $prog2 2>/dev/null 
       trap TERM
    fi
	[ $RETVAL -eq 0 ] && rm -f $lockfile2 
	
}

restart() { 
    stop
    start 
}

rh_status() {
    status -p $PID_FILE $SNORTD
	status -p $PID_FILE2 $BY2D
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in 
    start)
       rh_status_q && exit 0 
       start
       ;;
    stop)
       if ! rh_status_q; then
       rm -f $lockfile
	   rm -f $lockfile2
       exit 0 
       fi
       stop
       ;; 
restart)
       restart
       ;; 
status)
       rh_status
       RETVAL=$?
       if [ $RETVAL -eq 3 -a -f $lockfile ] ; then
       RETVAL=2
       fi
	   rh_status
       RETVAL=$?
       if [ $RETVAL -eq 3 -a -f $lockfile2 ] ; then
       RETVAL=2
       fi
       ;; 
*)
       echo $"Usage: $0 {start|stop|restart|status}" 
       RETVAL=2
esac
exit $RETVAL